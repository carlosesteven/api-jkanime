type StringOrNull$1 = string | null;
type StringArrayOrNull = string[] | null;
type NumberOrNull = number | null;

interface AnimeInfo$2 {
    slug: StringOrNull$1;
    title: StringOrNull$1;
    thumbnail: StringOrNull$1;
    type: StringOrNull$1;
    status: StringOrNull$1;
}
type ReturnType$5 = Promise<AnimeInfo$2[] | null>;
declare function byAlphabet(letter: string): ReturnType$5;

declare const GENRE_MAP: readonly ["accion", "aventura", "autos", "comedia", "dementia", "demonios", "misterio", "drama", "ecchi", "fantasia", "juegos", "hentai", "historico", "terror", "magia", "artes-marciales", "mecha", "musica", "parodia", "samurai", "romance", "colegial", "sci-fi", "shoujo-ai", "shounen-ai", "space", "deportes", "super-poderes", "vampiros", "yaoi", "yuri", "harem", "cosas-de-la-vida", "sobrenatural", "militar", "policial", "psicologico", "thriller", "espaol-latino", "isekai"];
declare const DEMOGRAPHY_MAP: readonly ["nios", "shoujo", "shounen", "seinen", "josei"];
declare const CATEGORY_MAP: readonly ["donghua"];
declare const TYPES_MAP: readonly ["animes", "peliculas", "especiales", "ovas", "onas"];
declare const STATE_MAP: readonly ["emision", "finalizados", "estrenos"];
declare const YEAR_MAP: readonly ["2024", "2023", "2022", "2021", "2020", "2019", "2018", "2017", "2016", "2015", "2014", "2013", "2012", "2011", "2010", "2009", "2008", "2007", "2006", "2005", "2004", "2003", "2002", "2001", "2000", "1999", "1998", "1997", "1996", "1995", "1994", "1993", "1992", "1991", "1990", "1989", "1988", "1987", "1986", "1985", "1984", "1983", "1982", "1981"];
declare const SEASON_MAP: readonly ["invierno", "primavera", "verano", "otoño"];
declare const ORDERBY_MAP: readonly ["desc"];

interface AnimeInfo$1 {
    slug: StringOrNull$1;
    title: StringOrNull$1;
    synopsis: StringOrNull$1;
    episodes: StringOrNull$1;
    image: StringOrNull$1;
    type: StringOrNull$1;
}
type Genre = typeof GENRE_MAP[number];
type Demography = typeof DEMOGRAPHY_MAP[number];
type Category = typeof CATEGORY_MAP[number];
type Type = typeof TYPES_MAP[number];
type State = typeof STATE_MAP[number];
type Year = typeof YEAR_MAP[number];
type Season = typeof SEASON_MAP[number];
type OrderBy = typeof ORDERBY_MAP[number];
interface Filter {
    genre?: Genre;
    demography?: Demography;
    category?: Category;
    type?: Type;
    state?: State;
    year?: Year;
    season?: Season;
    orderBy?: OrderBy;
}
interface FilterProps {
    query?: Filter;
}
type ReturnType$4 = Promise<AnimeInfo$1[] | null>;
declare function filter({ query }: FilterProps): ReturnType$4;

declare function getAnimeServers(animeId: string, chapter: number): Promise<string[] | null>;

interface AnimeInfo {
    type: StringOrNull$1;
    genre: StringArrayOrNull;
    studios: StringArrayOrNull;
    demography: StringArrayOrNull;
    languages: StringOrNull$1;
    episodes: StringOrNull$1;
    duration: StringOrNull$1;
    aired: StringOrNull$1;
    status: StringOrNull$1;
    quality: StringOrNull$1;
}
interface RootAnime {
    extra: AnimeInfo | null;
}
type ReturnType$3 = Promise<RootAnime | null>;
declare function getExtraInfo(animeSlug: string): ReturnType$3;

interface Anime$3 {
    slug: StringOrNull$1;
    title: StringOrNull$1;
    synopsis: StringOrNull$1;
    episodes: NumberOrNull;
    image: StringOrNull$1;
    type: StringOrNull$1;
    status: StringOrNull$1;
}
type ReturnType$2 = Promise<Anime$3[] | null>;
declare function latestAnimeAdded(): ReturnType$2;

type StringOrNull = string | null;
interface Anime$2 {
    id: StringOrNull;
    slug: StringOrNull;
    title: StringOrNull;
    image: StringOrNull;
    lastEpisode: StringOrNull;
    timestamp: StringOrNull;
    type: StringOrNull;
}
interface AnimeDay {
    day: string;
    animes: Anime$2[];
}
type ReturnType$1 = Promise<AnimeDay[]>;
declare function schedule(): ReturnType$1;

interface Anime$1 {
    id: string;
    slug: string;
    title: string;
    altertitles: {
        language: string;
        title: string;
    }[];
    synopsis: string;
    status: string;
    episodes: string;
    image: string;
    thumbnail: string;
    type: string;
    rel_id: {
        [key: string]: string[];
    };
    coincidencias: string;
}
interface AnimeTypes {
    [key: string]: string;
}
interface SearchResults {
    animes: Anime$1[];
    anime_types: AnimeTypes;
}
type SearchReturnType = Promise<SearchResults | null>;
declare function search(q: string): SearchReturnType;

interface Anime {
    id: StringOrNull$1;
    slug: StringOrNull$1;
    title: StringOrNull$1;
    synopsis: StringOrNull$1;
    episodes: NumberOrNull;
    image: StringOrNull$1;
    type: StringOrNull$1;
}
type SeasonType = 'Primavera' | 'Verano' | 'Otoño' | 'Invierno' | 'Temporada Actual';
type YearType = '2020' | '2021' | '2022' | '2023' | '2024';
type ReturnType = Promise<Anime[] | null>;
declare function top(season: SeasonType, year: YearType): ReturnType;

declare const _default: {
    byAlphabet: typeof byAlphabet;
    filter: typeof filter;
    getAnimeServers: typeof getAnimeServers;
    getExtraInfo: typeof getExtraInfo;
    latestAnimeAdded: typeof latestAnimeAdded;
    schedule: typeof schedule;
    search: typeof search;
    top: typeof top;
};

export { _default as default };
